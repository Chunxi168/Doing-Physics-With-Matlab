% spMotor.m

% Simulation of a simple DC motor lifting a load

% Ian Cooper
% email: ian.cooper@sydney.edu.au
% School of Physics, University of Sydney
% 181010 / Matlab version R2018a

% DOING PHYSICS WITH MATLAB 
%    http://www.physics.usyd.edu.au/teach_res/mp/mphome.htm

% VISUAL PHYSICS ONLINE
%    http://www.physics.usyd.edu.au/teach_res/hsp/sp/spHome.htm
%       http://www.physics.usyd.edu.au/teach_res/hsp/sp/ex/p60/P60018.htm
%  

close all
clc
clear

% INPUT SECTION =======================================================

% Mass of laod [kg]
m = 0.2;

% Acceleration due to gravity [ms/^2]
g = 9.81;
% Battery emf [v]
V = 12;
% Resistance of motor coil [ohm]
R = 1;
% Half length of square motor coil [m]
L = 0.1;
% Magnetic field of motor [T]
B = 0.1;

% Radius of motor's axle lifting load [m]
d = 0.01;
% Number of calculation time intervals
N = 1000000;
% Max simulation time
tMax = 8;


% CALCULATION SECTION =================================================
t = linspace(0,tMax,N);     % time grid [s]
dt = t(2)-t(1);             % time increment [s]

A = 4*L^2;                  % area of motor coil [m^2]

tauL = m*g*d;               % torque applied to lift load [N.m]      

Vback = zeros(N,1);         % back emf (induced voltage)  [V]
I = zeros(N,1);             % coil current [A]
tauM = zeros(N,1);          % torque exerted by motor coil rotating [N.m] 
w = zeros(N,1);             % angular speed of motor coil rotating [rad/s]

k1 = A*B;                   % constants
k2 = m*d^2;
k3 = A*B;

% Initial values 1st time step
I(1) = V/R;
tauM(1) = k1*I(1);

% 2nd time step
w(2) = w(1) + dt*(tauM(1)-tauL)/k2;
Vback(2) = k3*w(2);
I(2) = (V - Vback(2))/R;
tauM(2) = k1*I(2);

% Time evolution
% comment / uncomment if statement for varying load
for cc = 3:N
%if t(cc) > 4; k2 = 2*m*d^2; tauL = 2*m*g*d;end
  w(cc) = w(cc-2) + 2*dt*(tauM(cc-1) - tauL)/k2;
  Vback(cc) = k3*w(cc);
  I(cc) = (V - Vback(cc))/R;
  tauM(cc) = k1*I(cc);
end


% OUTPUT VALUES TO COMMAND WINDOW - steady state values
% Calculations

disp('  ')
% mass of load
   fprintf('mass of load  m = %2.3f  kg \n',m);
% torque due to gravitational force
   fprintf('torqueL = %2.4f  N.m \n',m*g*d);
% torque due to magnetic force
   fprintf('torqueM = %2.4f  N.m \n',m*g*d);
% coil current
  Icoil = m*g*d/(B*A);
  fprintf('Icoil = %2.2f  A \n',Icoil);
% back emf          
  vBACK = V - Icoil*R;          
  fprintf('back emf = %2.4f  V \n',vBACK);
% angular speed (rotation speed)  
  omega = vBACK / (B*A);
  fprintf('omega = %4.0f  rad/s \n',omega);
% power supplied by battery [W]  
   Pbattery = V*Icoil ; 
   fprintf('Pbattery = %2.2f  w \n',Pbattery);
% power dissipated by resistor [W]   
   Presistor = Icoil^2*R ;
   fprintf('Presistor = %2.2f  W \n',Presistor);
% power generated by motor to lift load [W]   
   Pmotor = Icoil*vBACK ;        
   fprintf('Pmotor = %2.2f  W \n',Pmotor);

   
% GRAPHICS ===========================================================
figure(1)
pos = [0.35 0.05 0.4 0.6];
  set(gcf,'Units','normalized');
  set(gcf,'Position',pos);
  set(gcf,'color','w');

xP = t; yP = w;
subplot(4,1,1)
plot(xP,yP,'linewidth',2)
grid on
set(gca,'fontsize',14)
ylim([0 3000])
ylabel('\omega  [ rad.s^{-1} ]')
xlabel('time  t  [ s ]')


xP = t; yP = Vback;
subplot(4,1,2)
plot(xP,yP,'linewidth',2)
grid on
set(gca,'fontsize',14)
ylim([0, 15])
ylabel('v_{back}  [ V ]')
xlabel('time  t  [ s ]')


xP = t; yP = I;
subplot(4,1,3)
plot(xP,yP,'linewidth',2)
grid on
ylabel('I  [ A ]')
set(gca,'fontsize',14)
ylim([0 15])

xP = t; yP = tauM-tauL;
subplot(4,1,4)
plot(xP,yP,'linewidth',2)
grid on
set(gca,'fontsize',14)
ylim([0 0.04])
set(gca,'ytick',0:0.02:0.04)
ylabel('\tau_{net}  [ N.m ]')
xlabel('time  t  [ s ]')

