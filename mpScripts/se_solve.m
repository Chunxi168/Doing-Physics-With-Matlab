% se_solve.m% Ian Cooper% School of Physics, University of Sydney% Matrix method used to solving time independent Schrodinger Equation% Energies values are in eV (electron volts)% Lengths are in nm (nanometers)% All other units are S.I.% You must run the m-script se_wells.m first then se_solve.m% Solution gives the energy eigenvalues and eigenfunctions% Outputs         % energy eignevalues displayed in Command Window         % Energy spectrum and Well displayed in Figure Windowtic% Make Second Derivative Matrix ------------------------------------------off     = ones(num-3,1);                 SD_matrix = (-2*eye(num-2) + diag(off,1) + diag(off,-1))/dx2;% Make KE MatrixK_matrix = Cse * SD_matrix;            % Make Hamiltonian MatrixH_matrix = K_matrix + U_matrix;% Find Eignevalues E_n and Eigenfunctions psi_N ---------------------------[e_funct e_values] = eig(H_matrix);% All Eigenvalues 1, 2 , ... n  where E_N < 0flag = 0;n = 1;while flag == 0    E(n) = e_values(n,n);    if E(n) > 0, flag = 1; end; % if    n = n + 1;end  % whileE(n-1) = [];n = n-2;% Corresponding Eigenfunctions 1, 2, ... ,n: Normalizing the wavefunctionfor cn = 1 : npsi(:,cn) = [0; e_funct(:,cn); 0];area = simpson1d((psi(:,cn) .* psi(:,cn))',xMin,xMax);psi(:,cn) = psi(:,cn)/sqrt(area);       % normalizeprob(:,cn) = psi(:,cn) .* psi(:,cn);if psi(5,cn) < 0, psi(:,cn) = -psi(:,cn); end;  % curve starts positiveend % for% Display eigenvalues in Command Window -------------------------------disp('   ');disp('================================================================  ');disp('  ');fprintf('No. bound states found =  %0.0g   \n',n);disp('   ');disp('Quantum State / Eigenvalues  En  (eV)');for cn = 1 : n    fprintf('  %0.0f   ',cn);    fprintf('   %0.5g   \n',E(cn));enddisp('   ')disp('   ');% Plot energy spectrum ------------------------------------------------xs(1) = xMin;xs(2) = xMax;figure(2);set(gcf,'Units','Normalized');set(gcf,'Position',[0.5 0.1 0.4 0.6]);set(gcf,'Name','Energy Spectrum','NumberTitle','off')set(gcf,'color',[1 1 1 ]);set(gca,'fontSize',12);plot(x,U,'b','LineWidth',2);xlabel('position x (nm)','FontSize',12);ylabel('energy U, E_n (eV)','FontSize',12);h_title = title(s);set(h_title,'FontSize',12);hold oncnmax = length(E);for cn = 1 : cnmax  ys(1) = E(cn);  ys(2) = ys(1);  plot(xs,ys,'r','LineWidth',2);end %for   axis([xMin-eps xMax min(U)-50 max(U)+50]);% Plots first 5 wavefunctions & probability density functionsif n < 6;    nMax = n;else    nMax = 5;end;figure(11)clfset(gcf,'Units','Normalized');set(gcf,'Position',[0.05 0.1 0.4 0.6]);set(gcf,'NumberTitle','off');set(gcf,'Name','Eigenvectors & Prob. densities');set(gcf,'Color',[1 1 1]);%nMax = 8;for cn = 1:nMax    subplot(nMax,2,2*cn-1);    y1 = psi(:,cn) ./ (max(psi(:,cn)-min(psi(:,cn))));    y2 = 1 + 2 * U ./ (max(U) - min(U));    plot(x,y1,'lineWidth',2)    hold on    plot(x,y2,'r','lineWidth',1)    %plotyy(x,psi(:,cn),x,U);    axis off    %title('\psi cn);    title_m = ['\psi   n = ', num2str(cn)] ;    title(title_m,'Fontsize',10);        subplot(nMax,2,2*cn);    y1 = prob(:,cn) ./ max(prob(:,cn));    y2 = 1 + 2 * U ./ (max(U) - min(U));    plot(x,y1,'lineWidth',2)    hold on    plot(x,y2,'r','lineWidth',1)    title_m = ['\psi^2   n = ', num2str(cn)] ;    title(title_m,'Fontsize',10);    axis offendtoc